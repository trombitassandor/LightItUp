using System.Collections.Generic;
using UnityEngine;
using System.Linq;
#if UNITY_EDITOR
using UnityEditor;
#endif
using LightItUp.Singletons;

namespace LightItUp.Data
{
    public class Localization : SingletonAsset<Localization>
    {
        public List<LocalizedData> textData;
        public List<LocalizedAlert> alertData;


        [System.Serializable]
        public class LocalizedData
        {
            public string name;
            [TextArea]
            public string text;
        }
        [System.Serializable]
        public class LocalizedAlert
        {
            public string name;
            public string header;
            [TextArea]
            public string body;
            public string[] buttons;
        }
#if UNITY_EDITOR
        public override void Init()
        {
            LoadFromJson();
        }
#endif
        public static string GetStringFormatted(string id, params string[] strParams)
        {
            return string.Format(GetString(id), strParams);
        }

        public static string GetString(string id)
        {
            var s = Instance.textData.FirstOrDefault(x=>x.name == id);
            if (s == null || string.IsNullOrEmpty(s.text))
            {
                Debug.Log("No text for id: "+id);
                return id;
            }
            return s.text;
        }


        public static LocalizedAlert GetAlert(AlertTypes id)
        {
            var s = Instance.alertData.FirstOrDefault(x => x.name == id.ToString());
            if (s == null)
            {
                Debug.Log("No alert for id: " + id);
                return null;
            }
            return s;
        }


#if UNITY_EDITOR
        [System.Serializable]
        public class SaveData
        {
            public List<LocalizedData> textData;
            public List<LocalizedAlert> alertData;
        }

        string localizationJsonPath = "Assets/_Game/Resources/TextData.txt";
        public void SaveAsJson()
        {
            SaveData d = new SaveData {
                textData = textData,
                alertData = alertData
            };
            FileManager.SaveFile(localizationJsonPath, d);
        }
        public void LoadFromJson()
        {
            SaveData d = FileManager.LoadFile<SaveData>(localizationJsonPath);
            textData = d.textData;
            alertData = d.alertData;
        }
	

        [MenuItem("Assets/Create/Localization")]
        public static void CreateLocalization()
        {
            CreateAsset();
        }
#endif
    }
#if UNITY_EDITOR
    [CustomEditor(typeof(Localization))]
    public class LocalizationEditor : Editor
    {
        string textIdsPath = "Assets/_Game/Scripts/Data/TextIds.cs";
        string alertTypesPath = "Assets/_Game/Scripts/Data/AlertTypes.cs";

        public override void OnInspectorGUI()
        {
            Localization myTarget = (Localization)target;
            DrawDefaultInspector();
            if (GUILayout.Button("Save as json"))
            {
                UpdateTextData(myTarget.textData);
                UpdateAlertTypes(myTarget.alertData);
                myTarget.SaveAsJson();
            }
            if (GUILayout.Button("Load from json"))
            {
                myTarget.LoadFromJson();
            }
        }
	


        public void UpdateTextData(List<Localization.LocalizedData> data)
        {
            FileManager.SaveAsStringConstsInClass(
                "TextIds", textIdsPath,
                data.Select(x => x.name).ToList(),
                "THIS FILE IS GENERATED BY Localization.cs, add new textIds via the Localization scriptable object in Resources!"
            );
        }
        public void UpdateAlertTypes(List<Localization.LocalizedAlert> data)
        {
            FileManager.SaveAsEnumList(
                "AlertTypes", alertTypesPath,
                data.Select(x => x.name).ToList(),
                "THIS FILE IS GENERATED BY Localization.cs, add new alerts via the Localization scriptable object in Resources!"
            );
        }

    }
#endif
}