using System.Collections.Generic;
using System.Linq;
#if UNITY_EDITOR
using UnityEditor;
#endif
using UnityEngine;
using LightItUp.Data;
using LightItUp.Singletons;

namespace LightItUp.Sound
{
    [RequireComponent(typeof(AudioSource))]
    public class SoundManager : SingletonLoad<SoundManager>
    {
        [System.Serializable]
        public class AudioData
        {
            public string clipName;
            public AudioClip clip;
            [Range(0f, 1f)]
            public float volume = 1;
        }

        public AudioSourceCtrl audioSourcePrefab;

        public List<AudioData> musicData;
        public List<AudioData> clipData;

        List<AudioSourceCtrl> audioSources;
        [HideInInspector]
        public AudioSource musicSource;

        public override void Awake()
        {
            Initialize();
        }
        void Initialize() {
            audioSources = new List<AudioSourceCtrl>();
            for (int i = 0; i < 10; i++) {
                AddSrc();
            }
            musicSource = gameObject.AddComponent<AudioSource>();
            musicSource.loop = true;
		
        }

        AudioSourceCtrl AddSrc()
        {
            var a = Instantiate(audioSourcePrefab, transform);
            a.gameObject.SetActive(false);
            audioSources.Add(a);
            return audioSources[audioSources.Count - 1];
        }
        AudioSourceCtrl GetSrc() {
            var v = audioSources.FirstOrDefault(x=>!x.gameObject.activeSelf);
            if (v == null) {
                v = AddSrc();
            }
            return v;
        }

        AudioData GetClipData(string clipName)
        {
            var c = Instance.clipData.FirstOrDefault(x => x.clipName.ToLower() == clipName.ToLower());
            if (c != null)
                return c;
            Debug.LogWarning("No clipData with name " + clipName);
            return new AudioData();
        }
        AudioData GetMusicData(string clipName)
        {
            var m = Instance.musicData.FirstOrDefault(x => x.clipName.ToLower() == clipName.ToLower());
            if (m != null)
                return m;
            Debug.LogWarning("No musicData with name " + clipName);
            return new AudioData();
        }

        public static void PlayMusic(string clipName)
        {
            if (!GameData.PlayerData.musicEnabled) return;
            var clip = Instance.GetMusicData(clipName);
            if (clip.clip != null)
            {
                Instance.musicSource.clip = clip.clip;
                Instance.musicSource.volume = clip.volume;
                Instance.musicSource.Play();
            }
            else
            {
                Debug.Log("No audioclip in musicData: "+clip.clipName);
            }        
        }
        public static void StopMusic()
        {
            Instance.musicSource.Stop();
        }

        public static void TogglePauseMusic(bool pause)
        {
            if (pause)
                Instance.musicSource.Pause();
            else
                Instance.musicSource.UnPause();        
        }

        public static void PlaySound(string clipName) {
            if (!GameData.PlayerData.soundEnabled) return;
            //Load clip data
            var clip = Instance.GetClipData(clipName);
            if (clip.clip != null)
            {
                var src = Instance.GetSrc();
                src.PlaySound(clip);
            }
            else
            {
                Debug.Log("No audioclip in clipData: " + clip.clipName);
            }
        }
    }
#if UNITY_EDITOR
    [CustomEditor(typeof(SoundManager))]
    public class SoundManagerEditor : Editor
    {
        string soundNamesPath = "Assets/_Game/Scripts/Sound/SoundNames.cs";
        string musicNamesPath = "Assets/_Game/Scripts/Sound/MusicNames.cs";
        public override void OnInspectorGUI()
        {
            SoundManager myTarget = (SoundManager)target;
            DrawDefaultInspector();
            if (GUILayout.Button("Update SoundNames.cs & MusicNames.cs"))
            {
                UpdateSoundNames(myTarget.clipData, myTarget.musicData);
            }
        }

        public void UpdateSoundNames(List<SoundManager.AudioData> clipData, List<SoundManager.AudioData> musicData)
        {
            FileManager.SaveAsStringConstsInClass(
                "SoundNames", soundNamesPath,
                clipData.Select(x => x.clipName).ToList(),
                "THIS FILE IS GENERATED BY SoundManager.cs, add new soundNames via the SoundManager prefab in Resources/Singletons!"
            );

            FileManager.SaveAsStringConstsInClass(
                "MusicNames", musicNamesPath,
                musicData.Select(x => x.clipName).ToList(),
                "THIS FILE IS GENERATED BY SoundManager.cs, add new music via the SoundManager prefab in Resources/Singletons!"
            );
        }
    }
#endif
}